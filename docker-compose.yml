version: '3.8'

services:
  # Backend API service
  api:
    container_name: p0cit-app
    build: .
    command: sh -c "alembic upgrade head && uvicorn app.main:app --host 0.0.0.0 --port 8001 --reload"
    volumes:
      - ./:/app
      - /var/run/docker.sock:/var/run/docker.sock # Mount Docker socket for Docker-in-Docker
      - poc_uploads:/app/uploads # Persist uploaded PoCs
    ports:
      - "8001:8001"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - CORS_ORIGINS=http://localhost:3000
    privileged: true # Required for Docker-in-Docker
    networks:
      - p0cit-network

  # Frontend service
  frontend:
    container_name: p0cit-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8001
      - NODE_ENV=development
      - FEATURES_DETAILED_ERRORS=${FEATURES_DETAILED_ERRORS:-true}
      - ENABLE_POC_UPLOAD=${ENABLE_POC_UPLOAD:-true}
      - ENABLE_POC_EXEC=${ENABLE_POC_EXEC:-false}
      - DISABLE_NETWORK=${DISABLE_NETWORK:-true}
      - MAX_UPLOAD_SIZE_MB=${MAX_UPLOAD_SIZE_MB:-50}
      - ALLOWED_EXTENSIONS=${ALLOWED_EXTENSIONS:-jpg,jpeg,png,pdf,txt,md,zip}
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_started
    restart: always
    networks:
      - p0cit-network
    command: npm run dev

  # Database service
  db:
    container_name: p0cit-db
    image: postgres:13
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-p0cit}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - p0cit-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-p0cit}" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Sandbox service for PoC execution (optional - can use Docker-in-Docker instead)
  sandbox:
    container_name: p0cit-sandbox
    image: docker:dind
    privileged: true
    restart: always
    volumes:
      - poc_uploads:/poc_data:ro # Read-only access to PoCs
    networks:
      - no-internet # Isolated network for security
    healthcheck:
      test: [ "CMD", "docker", "info" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    environment:
      - DISABLE_NETWORK=${DISABLE_NETWORK:-true}
    command: >
      sh -c "
        if [ \"$$DISABLE_NETWORK\" = \"true\" ]; then
          echo 'Starting Docker daemon with network disabled';
          dockerd-entrypoint.sh --iptables --ip6tables --userland-proxy=false;
        else
          echo 'Starting Docker daemon with network enabled';
          dockerd-entrypoint.sh;
        fi
      "

networks:
  p0cit-network:
    driver: bridge
  no-internet:
    driver: bridge
    internal: true # No outbound access

volumes:
  postgres_data:
  poc_uploads:
