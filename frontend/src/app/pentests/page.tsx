"use client";

import React, { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import axios from "axios";
import { format } from "date-fns";
import DashboardLayout from "@/components/DashboardLayout";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
    Card,
    CardContent,
    CardDescription,
    CardFooter,
    CardHeader,
    CardTitle
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Search, PlusCircle, Calendar, User, Shield } from "lucide-react";
import Link from "next/link";
import { Project, ProjectStatus } from "@/types/project";
import { formatDate } from "@/lib/utils";

export default function PentestsPage() {
    const [searchTerm, setSearchTerm] = useState("");

    const { data: projects = [], isLoading } = useQuery({
        queryKey: ["projects"],
        queryFn: async () => {
            const response = await axios.get(
                `${process.env.NEXT_PUBLIC_API_URL}/api/projects`,
                { withCredentials: true }
            );
            return response.data;
        },
    });

    const plannedProjects = projects.filter(
        (project: Project) => project.status === ProjectStatus.PLANNING
    );

    const inProgressProjects = projects.filter(
        (project: Project) => project.status === ProjectStatus.IN_PROGRESS
    );

    const completedProjects = projects.filter(
        (project: Project) => project.status === ProjectStatus.COMPLETED
    );

    const filterProjects = (projectList: Project[]) => {
        if (!searchTerm) return projectList;
        return projectList.filter((project: Project) =>
            project.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
            (project.client?.username || "").toLowerCase().includes(searchTerm.toLowerCase())
        );
    };

    const renderProjectList = (projectList: Project[]) => {
        const filteredList = filterProjects(projectList);

        if (filteredList.length === 0) {
            return (
                <div className="text-center py-10">
                    <p className="text-muted-foreground mb-4">No projects found in this category</p>
                </div>
            );
        }

        return (
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                {filteredList.map((project: Project) => (
                    <Link key={project.id} href={`/projects/${project.id}`}>
                        <Card className="h-full transition-all hover:shadow-md">
                            <CardHeader className="pb-2">
                                <CardTitle>{project.name}</CardTitle>
                                <CardDescription>
                                    Client: {project.client?.username || "Unknown"}
                                </CardDescription>
                            </CardHeader>
                            <CardContent>
                                <div className="space-y-2">
                                    <div className="flex items-center text-sm">
                                        <Calendar className="mr-2 h-4 w-4 opacity-70" />
                                        <span>Created on {formatDate(project.created_at)}</span>
                                    </div>
                                    <div className="flex items-center text-sm">
                                        <User className="mr-2 h-4 w-4 opacity-70" />
                                        <span>{Array.isArray(project.pentesters) ? project.pentesters.length : 0} pentesters assigned</span>
                                    </div>
                                    <div className="flex items-center text-sm">
                                        <Shield className="mr-2 h-4 w-4 opacity-70" />
                                        <span>{Array.isArray(project.vulnerabilities) ? project.vulnerabilities.length : 0} vulnerabilities identified</span>
                                    </div>
                                </div>
                            </CardContent>
                            <CardFooter className="pt-0">
                                <Button variant="outline" className="w-full">View Details</Button>
                            </CardFooter>
                        </Card>
                    </Link>
                ))}
            </div>
        );
    };

    return (
        <DashboardLayout>
            <div className="container p-6 mx-auto">
                <div className="space-y-6">
                    <div className="flex justify-between items-center">
                        <h1 className="text-3xl font-bold">Penetration Tests</h1>
                        <Button asChild>
                            <Link href="/projects/create">
                                <PlusCircle className="mr-2 h-4 w-4" />
                                New Pentest
                            </Link>
                        </Button>
                    </div>

                    <div className="relative">
                        <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                        <Input
                            placeholder="Search projects by name or client..."
                            className="pl-8 w-full md:w-[300px]"
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                        />
                    </div>

                    <Tabs defaultValue="in-progress" className="space-y-4">
                        <TabsList>
                            <TabsTrigger value="planned" className="relative">
                                Planning
                                {plannedProjects.length > 0 && (
                                    <Badge className="ml-2 px-1.5">{plannedProjects.length}</Badge>
                                )}
                            </TabsTrigger>
                            <TabsTrigger value="in-progress" className="relative">
                                In Progress
                                {inProgressProjects.length > 0 && (
                                    <Badge className="ml-2 px-1.5">{inProgressProjects.length}</Badge>
                                )}
                            </TabsTrigger>
                            <TabsTrigger value="completed" className="relative">
                                Completed
                                {completedProjects.length > 0 && (
                                    <Badge className="ml-2 px-1.5">{completedProjects.length}</Badge>
                                )}
                            </TabsTrigger>
                        </TabsList>

                        <TabsContent value="planned" className="space-y-4">
                            <h2 className="text-xl font-semibold">Planning Phase</h2>
                            {isLoading ? (
                                <div className="text-center py-10">Loading...</div>
                            ) : (
                                renderProjectList(plannedProjects)
                            )}
                        </TabsContent>

                        <TabsContent value="in-progress" className="space-y-4">
                            <h2 className="text-xl font-semibold">Active Penetration Tests</h2>
                            {isLoading ? (
                                <div className="text-center py-10">Loading...</div>
                            ) : (
                                renderProjectList(inProgressProjects)
                            )}
                        </TabsContent>

                        <TabsContent value="completed" className="space-y-4">
                            <h2 className="text-xl font-semibold">Completed Penetration Tests</h2>
                            {isLoading ? (
                                <div className="text-center py-10">Loading...</div>
                            ) : (
                                renderProjectList(completedProjects)
                            )}
                        </TabsContent>
                    </Tabs>
                </div>
            </div>
        </DashboardLayout>
    );
}