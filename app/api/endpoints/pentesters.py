from typing import List, Optional
from fastapi import APIRouter, Depends, HTTPException, status, File, UploadFile
from sqlalchemy.orm import Session
from uuid import UUID
from app.core.deps import get_current_user, get_db, require_role
from app.schemas.user import (
    UserWithRelations,
    PentesterProfile,
    Speciality,
    Timesheet,
    TimesheetCreate,
    Report,
    ReportCreate,
    Role,
    PentesterResponse,
    SpecialityCreate,
    SpecialityUpdate
)
from app.schemas.report import ReportUpdate
from app.models.user import User, Speciality as SpecialityModel
from app.crud import crud_user, crud_speciality, crud_timesheet, crud_report
from app.schemas.timesheet import TimesheetUpdate
from app.schemas.mission import MissionCreate, Mission
from app.models.timesheet import TimesheetStatus
from app.models.report import ReportStatus
from app.models.mission import MissionStatus
import os
import shutil
from datetime import datetime

router = APIRouter()

@router.get("/me", response_model=UserWithRelations)
async def get_pentester_profile(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """Get current pentester's profile"""
    if current_user.role != Role.PENTESTER:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not authorized to access pentester profile"
        )
    return current_user

@router.put("/me/profile", response_model=UserWithRelations)
async def update_pentester_profile(
    profile: PentesterProfile,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """Update pentester's profile"""
    if current_user.role != Role.PENTESTER:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not authorized to update pentester profile"
        )
    
    updated_user = crud_user.update_pentester_profile(db, current_user, profile)
    return updated_user

@router.get("/specialities", response_model=List[Speciality])
async def get_specialities(
    db: Session = Depends(get_db)
):
    """Get all available specialities"""
    return crud_speciality.get_all(db)

@router.post("/specialities", response_model=List[Speciality])
async def update_specialities(
    speciality_ids: List[str],
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """Update pentester's specialities"""
    if current_user.role != Role.PENTESTER:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not authorized to update specialities"
        )
    
    return crud_speciality.update_user_specialities(db, current_user, speciality_ids)

@router.post("/timesheets", response_model=Timesheet)
async def create_timesheet(
    timesheet: TimesheetCreate,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """Create a new timesheet entry"""
    if current_user.role != Role.PENTESTER:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not authorized to create timesheets"
        )
    
    return crud_timesheet.create(db, current_user.id, timesheet)

@router.get("/timesheets", response_model=List[Timesheet])
async def get_timesheets(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """Get pentester's timesheets"""
    if current_user.role != Role.PENTESTER:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not authorized to view timesheets"
        )
    
    return crud_timesheet.get_by_user(db, current_user.id)

@router.put("/timesheets/{timesheet_id}", response_model=Timesheet)
async def update_timesheet(
    timesheet_id: str,
    timesheet_update: TimesheetUpdate,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """Update a timesheet entry"""
    if current_user.role != Role.PENTESTER:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not authorized to update timesheets"
        )
    
    timesheet = crud_timesheet.get(db, timesheet_id)
    if not timesheet or timesheet.user_id != current_user.id:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Timesheet not found"
        )
    
    return crud_timesheet.update(db, db_obj=timesheet, obj_in=timesheet_update)

@router.post("/reports", response_model=Report)
async def create_report(
    report: ReportCreate,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """Create a new report"""
    if current_user.role != Role.PENTESTER:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not authorized to create reports"
        )
    
    return crud_report.create(db, current_user.id, report)

@router.get("/reports", response_model=List[Report])
async def get_reports(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """Get pentester's reports"""
    if current_user.role != Role.PENTESTER:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not authorized to view reports"
        )
    
    return crud_report.get_by_author(db, current_user.id)

@router.put("/reports/{report_id}", response_model=Report)
async def update_report(
    report_id: str,
    report_update: ReportUpdate,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """Update a report"""
    if current_user.role != Role.PENTESTER:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not authorized to update reports"
        )
    
    report = crud_report.get(db, report_id)
    if not report or report.author_id != current_user.id:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Report not found"
        )
    
    return crud_report.update(db, db_obj=report, obj_in=report_update)

@router.put("/availability", response_model=PentesterProfile)
async def update_availability(
    status: str,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """Update pentester's availability status"""
    if current_user.role != Role.PENTESTER:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Not authorized to update availability"
        )
    
    if status not in ["available", "busy", "unavailable"]:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Invalid availability status"
        )
    
    updated_user = crud_user.update_availability(db, current_user, status)
    return updated_user 