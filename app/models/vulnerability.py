from sqlalchemy import Column, ForeignKey, Text, String, Enum, DateTime, Float, JSON
from sqlalchemy.orm import relationship
from sqlalchemy.dialects.postgresql import UUID
from app.db.base_class import Base
import enum
import uuid
from datetime import datetime

class PoCType(str, enum.Enum):
    python = "python"
    go = "go"
    bash = "bash"

class VulnerabilitySeverity(str, enum.Enum):
    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    INFO = "info"

class VulnerabilityStatus(str, enum.Enum):
    OPEN = "open"
    IN_PROGRESS = "in_progress"
    FIXED = "fixed"
    FALSE_POSITIVE = "false_positive"
    WONT_FIX = "wont_fix"

class Vulnerability(Base):
    __tablename__ = "vulnerabilities"
    __table_args__ = {'extend_existing': True}

    id = Column(UUID(as_uuid=True), primary_key=True, index=True, default=uuid.uuid4)
    title = Column(String, nullable=False)
    description = Column(Text, nullable=False)
    severity = Column(Enum(VulnerabilitySeverity), nullable=False)
    status = Column(Enum(VulnerabilityStatus), nullable=False, default=VulnerabilityStatus.OPEN)
    cvss_score = Column(Float)
    cvss_vector = Column(String)
    steps_to_reproduce = Column(Text)
    impact = Column(Text)
    recommendation = Column(Text)
    references = Column(JSON)  # List of reference URLs
    project_id = Column(UUID(as_uuid=True), ForeignKey("projects.id"), nullable=False)
    discovered_by = Column(UUID(as_uuid=True), ForeignKey("users.id"), nullable=False)
    fixed_by = Column(UUID(as_uuid=True), ForeignKey("users.id"))
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    fixed_at = Column(DateTime)
    
    # PoC details
    poc_type = Column(Enum(PoCType), nullable=False)
    poc_code = Column(Text, nullable=True)  # Actual code for execution
    poc_zip_path = Column(String, nullable=True)  # Path to zip file

    # Relationships
    project = relationship("Project", back_populates="vulnerabilities")
    discoverer = relationship("User", foreign_keys=[discovered_by], back_populates="discovered_vulnerabilities")
    fixer = relationship("User", foreign_keys=[fixed_by], back_populates="fixed_vulnerabilities")