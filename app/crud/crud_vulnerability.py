from sqlalchemy.orm import Session
from typing import List, Optional
from uuid import UUID
from app.models.vulnerability import Vulnerability
from app.schemas.vulnerability import VulnerabilityCreate
from app.utils.file_handler import file_handler

def get_vulnerability(db: Session, vulnerability_id: UUID) -> Optional[Vulnerability]:
    """Get a specific vulnerability by ID"""
    return db.query(Vulnerability).filter(Vulnerability.id == vulnerability_id).first()

def get_vulnerabilities_by_project(db: Session, project_id: UUID) -> List[Vulnerability]:
    """Get all vulnerabilities for a specific project"""
    return db.query(Vulnerability).filter(Vulnerability.project_id == project_id).all()

def create_vulnerability(db: Session, vulnerability: VulnerabilityCreate, project_id: UUID) -> Vulnerability:
    """Create a new vulnerability"""
    # Create vulnerability object
    db_vulnerability = Vulnerability(
        title=vulnerability.title,
        description_md=vulnerability.description_md,
        poc_type=vulnerability.poc_type,
        poc_code=vulnerability.poc_code,
        poc_zip_path=vulnerability.poc_zip_path,
        project_id=project_id
    )
    
    db.add(db_vulnerability)
    db.commit()
    db.refresh(db_vulnerability)
    return db_vulnerability

def update_vulnerability(
    db: Session, 
    vulnerability_id: UUID, 
    vulnerability_data: dict
) -> Optional[Vulnerability]:
    """Update an existing vulnerability"""
    db_vulnerability = get_vulnerability(db, vulnerability_id)
    if not db_vulnerability:
        return None
    
    # Update attributes
    for key, value in vulnerability_data.items():
        setattr(db_vulnerability, key, value)
    
    db.commit()
    db.refresh(db_vulnerability)
    return db_vulnerability

def update_vulnerability_poc_zip(
    db: Session, 
    vulnerability_id: UUID, 
    poc_zip_path: str
) -> Optional[Vulnerability]:
    """Update the PoC ZIP file path for a vulnerability"""
    return update_vulnerability(db, vulnerability_id, {"poc_zip_path": poc_zip_path})

def delete_vulnerability(db: Session, vulnerability_id: UUID) -> bool:
    """Delete a vulnerability and its associated files"""
    db_vulnerability = get_vulnerability(db, vulnerability_id)
    if not db_vulnerability:
        return False
    
    # Delete associated files
    if db_vulnerability.poc_zip_path:
        file_handler.delete_poc_files(vulnerability_id)
    
    # Delete from database
    db.delete(db_vulnerability)
    db.commit()
    return True

def get_recent(db: Session, *, limit: int = 5) -> List[Vulnerability]:
    """Get recent vulnerabilities."""
    return db.query(Vulnerability).order_by(Vulnerability.created_at.desc()).limit(limit).all()